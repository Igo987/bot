// Code generated by MockGen. DO NOT EDIT.
// Source: currencies.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github/Igo87/crypt/models"
	slog "log/slog"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCurrencies is a mock of Currencies interface.
type MockCurrencies struct {
	ctrl     *gomock.Controller
	recorder *MockCurrenciesMockRecorder
}

// MockCurrenciesMockRecorder is the mock recorder for MockCurrencies.
type MockCurrenciesMockRecorder struct {
	mock *MockCurrencies
}

// NewMockCurrencies creates a new mock instance.
func NewMockCurrencies(ctrl *gomock.Controller) *MockCurrencies {
	mock := &MockCurrencies{ctrl: ctrl}
	mock.recorder = &MockCurrenciesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCurrencies) EXPECT() *MockCurrenciesMockRecorder {
	return m.recorder
}

// AddCurrencies mocks base method.
func (m *MockCurrencies) AddCurrencies(ctx context.Context, data []models.Currencies) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCurrencies", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCurrencies indicates an expected call of AddCurrencies.
func (mr *MockCurrenciesMockRecorder) AddCurrencies(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCurrencies", reflect.TypeOf((*MockCurrencies)(nil).AddCurrencies), ctx, data)
}

// Fetch mocks base method.
func (m *MockCurrencies) Fetch(ctx context.Context, l slog.Logger) ([]models.Currencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, l)
	ret0, _ := ret[0].([]models.Currencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockCurrenciesMockRecorder) Fetch(ctx, l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockCurrencies)(nil).Fetch), ctx, l)
}

// InitDB mocks base method.
func (m *MockCurrencies) InitDB(ctx context.Context, l slog.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitDB", ctx, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitDB indicates an expected call of InitDB.
func (mr *MockCurrenciesMockRecorder) InitDB(ctx, l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDB", reflect.TypeOf((*MockCurrencies)(nil).InitDB), ctx, l)
}

// Run mocks base method.
func (m *MockCurrencies) Run(ctx context.Context, l slog.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockCurrenciesMockRecorder) Run(ctx, l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCurrencies)(nil).Run), ctx, l)
}

// SelectCurrenciesByLastDay mocks base method.
func (m *MockCurrencies) SelectCurrenciesByLastDay(ctx context.Context) (models.Currencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCurrenciesByLastDay", ctx)
	ret0, _ := ret[0].(models.Currencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCurrenciesByLastDay indicates an expected call of SelectCurrenciesByLastDay.
func (mr *MockCurrenciesMockRecorder) SelectCurrenciesByLastDay(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCurrenciesByLastDay", reflect.TypeOf((*MockCurrencies)(nil).SelectCurrenciesByLastDay), ctx)
}

// SelectCurrenciesByName mocks base method.
func (m *MockCurrencies) SelectCurrenciesByName(ctx context.Context, date string) (models.Currencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCurrenciesByName", ctx, date)
	ret0, _ := ret[0].(models.Currencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCurrenciesByName indicates an expected call of SelectCurrenciesByName.
func (mr *MockCurrenciesMockRecorder) SelectCurrenciesByName(ctx, date interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCurrenciesByName", reflect.TypeOf((*MockCurrencies)(nil).SelectCurrenciesByName), ctx, date)
}

// SelectCurrenciesByToday mocks base method.
func (m *MockCurrencies) SelectCurrenciesByToday(ctx context.Context) (models.Currencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCurrenciesByToday", ctx)
	ret0, _ := ret[0].(models.Currencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCurrenciesByToday indicates an expected call of SelectCurrenciesByToday.
func (mr *MockCurrenciesMockRecorder) SelectCurrenciesByToday(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCurrenciesByToday", reflect.TypeOf((*MockCurrencies)(nil).SelectCurrenciesByToday), ctx)
}
