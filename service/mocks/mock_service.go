// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	models "github/Igo87/crypt/models"
	slog "log/slog"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockrepositoryManager is a mock of repositoryManager interface.
type MockrepositoryManager struct {
	ctrl     *gomock.Controller
	recorder *MockrepositoryManagerMockRecorder
}

// MockrepositoryManagerMockRecorder is the mock recorder for MockrepositoryManager.
type MockrepositoryManagerMockRecorder struct {
	mock *MockrepositoryManager
}

// NewMockrepositoryManager creates a new mock instance.
func NewMockrepositoryManager(ctrl *gomock.Controller) *MockrepositoryManager {
	mock := &MockrepositoryManager{ctrl: ctrl}
	mock.recorder = &MockrepositoryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepositoryManager) EXPECT() *MockrepositoryManagerMockRecorder {
	return m.recorder
}

// AddCurrencies mocks base method.
func (m *MockrepositoryManager) AddCurrencies(ctx context.Context, data models.Crypto) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCurrencies", ctx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddCurrencies indicates an expected call of AddCurrencies.
func (mr *MockrepositoryManagerMockRecorder) AddCurrencies(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCurrencies", reflect.TypeOf((*MockrepositoryManager)(nil).AddCurrencies), ctx, data)
}

// Close mocks base method.
func (m *MockrepositoryManager) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockrepositoryManagerMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockrepositoryManager)(nil).Close), ctx)
}

// Fetch mocks base method.
func (m *MockrepositoryManager) Fetch(ctx context.Context, l slog.Logger) (models.Crypto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", ctx, l)
	ret0, _ := ret[0].(models.Crypto)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockrepositoryManagerMockRecorder) Fetch(ctx, l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockrepositoryManager)(nil).Fetch), ctx, l)
}

// Run mocks base method.
func (m *MockrepositoryManager) Run(ctx context.Context, l slog.Logger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, l)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockrepositoryManagerMockRecorder) Run(ctx, l interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockrepositoryManager)(nil).Run), ctx, l)
}

// SelectCurrenciesByLastDay mocks base method.
func (m *MockrepositoryManager) SelectCurrenciesByLastDay(ctx context.Context) (models.Currencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCurrenciesByLastDay", ctx)
	ret0, _ := ret[0].(models.Currencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCurrenciesByLastDay indicates an expected call of SelectCurrenciesByLastDay.
func (mr *MockrepositoryManagerMockRecorder) SelectCurrenciesByLastDay(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCurrenciesByLastDay", reflect.TypeOf((*MockrepositoryManager)(nil).SelectCurrenciesByLastDay), ctx)
}

// SelectCurrenciesByName mocks base method.
func (m *MockrepositoryManager) SelectCurrenciesByName(ctx context.Context, name string) (models.Currencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCurrenciesByName", ctx, name)
	ret0, _ := ret[0].(models.Currencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCurrenciesByName indicates an expected call of SelectCurrenciesByName.
func (mr *MockrepositoryManagerMockRecorder) SelectCurrenciesByName(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCurrenciesByName", reflect.TypeOf((*MockrepositoryManager)(nil).SelectCurrenciesByName), ctx, name)
}

// SelectCurrenciesByToday mocks base method.
func (m *MockrepositoryManager) SelectCurrenciesByToday(ctx context.Context) (models.Currencies, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectCurrenciesByToday", ctx)
	ret0, _ := ret[0].(models.Currencies)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SelectCurrenciesByToday indicates an expected call of SelectCurrenciesByToday.
func (mr *MockrepositoryManagerMockRecorder) SelectCurrenciesByToday(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectCurrenciesByToday", reflect.TypeOf((*MockrepositoryManager)(nil).SelectCurrenciesByToday), ctx)
}
